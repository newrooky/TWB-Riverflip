<?php
/**
 * @file
 * OpenID Admin module
 *
 * Bulk adding of OpenIDs for Drupal accounts
 * 
 * By Jose A. Reyero
 * Development Seed, http://www.developmentseed.org
 * 
 */

/**
 * Implementation of hook_menu().
 */
function openidadmin_menu() {
  $items = array();
  // Move default openid tab to a subtab
  $items['user/%user/openid/identities'] = array(
    'title' => 'OpenID identities',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['user/%user/openid/list'] = array(
    'title' => 'Add list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openidadmin_list_form',1),
    'access callback' => 'openidadmin_list_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    //'file' => 'openid.pages.inc',
    
  );  

  return $items;
}

/**
 * Menu access callback
 */
function openidadmin_list_access($account) {
  return user_edit_access($account) && user_access('add list of open ids');
}

/**
 * Implementation of hook_help()
 */
function openidadmin_help($path, $arg) {
  switch ($path) {
    case 'user/%/openid/list':
      return t('You may add a list op OpenID\'s for this user account. These identities will skip any authentication and will be just linked to this account.');
  }
}

/**
 * Implementation of hook_perm()
 */
function openidadmin_perm() {
  return array('add list of open ids');
}

/**
 * Form callback. Add list of Open IDs
 */
function openidadmin_list_form(&$form_state, $account) {
  $form['account'] = array('#type' => 'value', '#value' => $account);
  $form['list'] = array(
    '#type' => 'textarea',
    '#title' => t('List of OpenIDs'),
    '#required' => TRUE,
    '#description' => t('Add a list of OpenIDs for this account, one per line.'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Add'));
  return $form;
  
}

/**
 * Form callback. List validation
 */
function openidadmin_list_form_validate($form, &$form_state) {
  foreach (openidadmin_normalize_list($form_state['values']['list']) as $claimed_id) {
    // Check for existing entries.
    if ($uid = db_result(db_query("SELECT uid FROM {authmap} WHERE authname='%s'", $claimed_id))) {
      $account = user_load(array('uid' => $uid));
      form_set_error('list', t('The OpenID %identity is already in use on this site for the user !name.', array('%identity' => $claimed_id, '!name' => theme('username', $account))));
    }
  }
}

/**
 * Form callback. List submission
 */
function openidadmin_list_form_submit($form, &$form_state) {
  $account = $form_state['values']['account'];
  $add_list = openidadmin_normalize_list($form_state['values']['list']);
  foreach ($add_list as $claimed_id) {
    db_query("INSERT INTO {authmap}(uid, authname, module) VALUES(%d, '%s', 'openid')", $account->uid, $claimed_id);
  }
  drupal_set_message(format_plural(count($add_list), 'One OpenID has been added.', '@count OpenIDs have been added.'));
  return "user/$account->uid/openid";
}

/**
 * Helper function. Convert text area into normalized list removing duplicates
 */
function openidadmin_normalize_list($text) {
  module_load_include('inc', 'openid');
  //require_once drupal_get_path('module', 'openid') .'/openid.inc';
  
  $list = explode("\n", $text);
  $normalized = array();
  foreach ($list as $identity) {
    if ($identity = trim($identity)) {
      $claimed_id = _openid_normalize($identity);
      // This will take care of duplicates
      $normalized[$claimed_id] = $claimed_id;
    }   
  }
  return $normalized;
}